Q: Is one sorting algorithm always faster than another?
A:Yes, always faster.

Q: Above we said that BubbleSort, WipingBubbleSort, and InsertionSort each had the same Theta(N^2) asymptotic time complexity. How can you explain the differences in the plots for these three algorithms?
A: They have same bound for asymptotic cases, but since we don't have large enough size of array for the algorithm to approach the asymptotic case, we will view different performance for smaller sample

Q: What information can we gain from empirical analysis of algorithms which might not be as noticeable in asymptotical bounds?
A:Wipingbubblesoter is only half time than the bubble sorter, although they have the same big oh bound.

Q: For any given sorting algorithm, does increasing the array size always mean the sorting takes longer?
A: yes it is 

Q: How does changing nrepeats change the plot?
A: the curve become smoother.

Q: Is your plot the exact same as your partner's plot, even with the same values of ntrials, by, and nrepeats?
A: not really.

Q: Optional: Look at the source code for BubbleSorter to WipingBubbleSorter. After looking at the plots, can you intuitively explain why WipingBubbleSorter is usually 2x as fast as BubbleSorter? (Hint: Consider the immobility of some elements when the swapping passes are single directional (i.e. only going forward), and how this "Wiping" strategy helps deal with that issue.) Can you come up with an example that shows the difference in runtime?
A: